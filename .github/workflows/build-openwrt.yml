name: Build OpenWrt

on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Specify source repository url'
        required: true
        default: 'https://github.com/openwrt/openwrt'
        type: choice
        options:
          - 'https://github.com/openwrt/openwrt'
          - 'https://github.com/coolsnowwolf/lede'
      repo_branch:
        description: 'Specify repository branch'
        required: true
        default: 'master'
      config_file:
        description: 'Specify config file location'
        required: true
        default: ''
      feed_script:
        description: 'Specify feeds script location'
        required: false
        default: ''
      ipv4:
        description: 'Specify IP address built in'
        required: false
        default: '192.168.1.1'
      note:
        description: 'Write build note'
        required: false
        default: ''

env:
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf  /usr/share/dotnet  /etc/mysql  /etc/php
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox
        sudo -E apt-get -y purge google* dotnet* powershell openjdk* php*
        sudo -E apt-get -qq update
        # https://raw.githubusercontent.com/P3TERX/openwrt-list/master/depends-ubuntu-2004
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /work
        sudo chown $USER:$GROUPS /work

    - name: Clone source code
      working-directory: /work
      run: |
        df -hT $PWD
        git clone ${{ github.event.inputs.repo_url }} \
          -b ${{ github.event.inputs.repo_branch }} openwrt
        ln -sf /work/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        if [ "${{ github.event.inputs.feed_script }}" != "" ] && \
          [ -f ${{ github.event.inputs.feed_script }} ]; then
          chmod +x ${{ github.event.inputs.feed_script }}
          cd openwrt
          $GITHUB_WORKSPACE/${{ github.event.inputs.feed_script }}
        fi

    - name: Update & Install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        (cat ${{ github.event.inputs.config_file }} |grep -o '^[^#]*' |sort|uniq) \
        2>/dev/null > openwrt/.config
        sed -i 's/192.168.1.1/${{ github.event.inputs.ipv4 }}/g' \
        openwrt/package/base-files/files/bin/config_generate

    - name: Download packages
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name : Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo -e "**Source**: ${{ github.event.inputs.repo_url }}" >> release.txt
        echo -e "**Branch**: ${{ github.event.inputs.repo_branch }}" >> release.txt
        echo -e "**Config**: ${{ github.event.inputs.config_file }}" >> release.txt
        echo -e "**Feeds**: ${{ github.event.inputs.feed_script }}" >> release.txt
        echo -e "**IPv4**: ${{ github.event.inputs.ipv4 }}" >> release.txt
        echo -e "**Note**: ${{ github.event.inputs.note }}" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 5

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
